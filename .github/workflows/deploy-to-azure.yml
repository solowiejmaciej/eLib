name: Build, Push, and Deploy to Azure Container Instances

on:
  push:
    branches:
      - master

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure Container Registry
      run: |
        echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Debug Secrets
      run: |
        echo "Checking secrets..."
        if [ -z "${{ secrets.DB_CONNECTION_STRING }}" ]; then echo "DB_CONNECTION_STRING is empty"; fi
        if [ -z "${{ secrets.JWT_KEY }}" ]; then echo "JWT_KEY is empty"; fi
        if [ -z "${{ secrets.RABBITMQ_HOSTNAME }}" ]; then echo "RABBITMQ_HOSTNAME is empty"; fi
        if [ -z "${{ secrets.RABBITMQ_USERNAME }}" ]; then echo "RABBITMQ_USERNAME is empty"; fi
        if [ -z "${{ secrets.RABBITMQ_PASSWORD }}" ]; then echo "RABBITMQ_PASSWORD is empty"; fi

    - name: Update appsettings.json for eLib API
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        dbConn=$(printf '%s' "${{ secrets.DB_CONNECTION_STRING }}" | sed 's/[&/\]/\\&/g')
        jwtKey=$(printf '%s' "${{ secrets.JWT_KEY }}" | sed 's/[&/\]/\\&/g')
        rabbitHost=$(printf '%s' "${{ secrets.RABBITMQ_HOSTNAME }}" | sed 's/[&/\]/\\&/g')
        rabbitUser=$(printf '%s' "${{ secrets.RABBITMQ_USERNAME }}" | sed 's/[&/\]/\\&/g')
        rabbitPass=$(printf '%s' "${{ secrets.RABBITMQ_PASSWORD }}" | sed 's/[&/\]/\\&/g')
        jq --arg dbConnStr "$dbConn" \
           --arg jwtKey "$jwtKey" \
           --arg rabbitHost "$rabbitHost" \
           --arg rabbitUser "$rabbitUser" \
           --arg rabbitPass "$rabbitPass" \
           '.ConnectionStrings.DefaultConnection = $dbConnStr |
            .AuthSettings.SecretKey = $jwtKey |
            .RabbitMQ.HostName = $rabbitHost |
            .RabbitMQ.UserName = $rabbitUser |
            .RabbitMQ.Password = $rabbitPass' \
           ./src/api/appsettings.json > ./src/api/appsettings.tmp.json
        mv ./src/api/appsettings.tmp.json ./src/api/appsettings.json

    - name: Build and Push eLib API
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/elib:latest . --file ./src/api/Dockerfile
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/elib:latest

    - name: Update appsettings.json for Notification Service
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        dbConn=$(printf '%s' "${{ secrets.DB_CONNECTION_STRING }}" | sed 's/[&/\]/\\&/g')
        jwtKey=$(printf '%s' "${{ secrets.JWT_KEY }}" | sed 's/[&/\]/\\&/g')
        rabbitHost=$(printf '%s' "${{ secrets.RABBITMQ_HOSTNAME }}" | sed 's/[&/\]/\\&/g')
        rabbitUser=$(printf '%s' "${{ secrets.RABBITMQ_USERNAME }}" | sed 's/[&/\]/\\&/g')
        rabbitPass=$(printf '%s' "${{ secrets.RABBITMQ_PASSWORD }}" | sed 's/[&/\]/\\&/g')
        jq --arg dbConnStr "$dbConn" \
           --arg jwtKey "$jwtKey" \
           --arg rabbitHost "$rabbitHost" \
           --arg rabbitUser "$rabbitUser" \
           --arg rabbitPass "$rabbitPass" \
           '.ConnectionStrings.DefaultConnection = $dbConnStr |
            .AuthSettings.SecretKey = $jwtKey |
            .RabbitMQ.HostName = $rabbitHost |
            .RabbitMQ.UserName = $rabbitUser |
            .RabbitMQ.Password = $rabbitPass' \
           ./src/eLib.NotificationService/appsettings.json > ./src/eLib.NotificationService/appsettings.tmp.json
        mv ./src/eLib.NotificationService/appsettings.tmp.json ./src/eLib.NotificationService/appsettings.json

    - name: Build and Push Notification Service
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/elib-notification:latest . --file ./src/eLib.NotificationService/Dockerfile
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/elib-notification:latest

    - name: Build and Push Frontend
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/elib-web:latest ./src/web/eLib --file ./src/web/eLib/Dockerfile
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/elib-web:latest

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy eLib API
      if: success()
      run: |
        az container create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elib-api \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/elib:latest \
          --cpu 1 --memory 1 \
          --ports 8080 \
          --ip-address Public \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables ASPNETCORE_ENVIRONMENT=Production

    - name: Deploy Notification Service
      if: success()
      run: |
        az container create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elib-notification-service \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/elib-notification:latest \
          --cpu 1 --memory 1 \
          --ports 8080 \
          --ip-address Public \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables ASPNETCORE_ENVIRONMENT=Production

    - name: Deploy Frontend
      if: success()
      run: |
        az container create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name elib-web \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/elib-web:latest \
          --cpu 1 --memory 1 \
          --ports 3000 \
          --ip-address Public \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }}
